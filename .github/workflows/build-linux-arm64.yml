name: Build [Linux arm64]

on:
  push:
    branches: [ "main", "test" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

jobs:
  build-spms:
    runs-on: ubuntu-22.04
    container: ubuntu:23.04
    if: ${{ github.event.pull_request.draft == false && (github.event_name == 'workflow_dispatch' || !contains(github.event.head_commit.message, 'noci')) }}

    env:
      TOOLCHAIN_VERSION: aarch64-unknown-linux-gnu-gcc-8.3.0-glibc-2.25-kernel-4.9-2
      JAVA_HOME: /usr/lib/jvm/java-21-openjdk/

    steps:
    - run: echo "TOOLCHAIN=$GITHUB_WORKSPACE/toolchain" >> $GITHUB_ENV
    - run: echo "SPMS_ARCH=arm64" >> $GITHUB_ENV

    - run: sudo apt-get update
    - run: sudo apt-get install -y nodejs
      if: env.ACT

    - name: Set up JDKs
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: |
          22
          21

    - name: Test Java
      run: $JAVA_HOME/bin/java --version

    - run: sudo apt-get install -y --reinstall git make wget pkg-config libc6-dev-i386

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Get cached libzmq
      id: cache-libzmq
      uses: actions/cache@v4
      with:
        path: libzmq
        key: libzmq-arm64

    - name: Download and extract toolchain
      run: |
        wget https://download.jetbrains.com/kotlin/native/$TOOLCHAIN_VERSION.tar.gz -O toolchain.tar.gz
        tar -xzf toolchain.tar.gz
        mv ./$TOOLCHAIN_VERSION $TOOLCHAIN

    - name: Download libzmq
      if: steps.cache-libzmq.outputs.cache-hit != 'true'
      run: wget https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz

    - name: Extract libzmq
      if: steps.cache-libzmq.outputs.cache-hit != 'true'
      run: tar -xf ./zeromq-4.3.5.tar.gz

    - name: Configure libzmq
      if: steps.cache-libzmq.outputs.cache-hit != 'true'
      working-directory: zeromq-4.3.5
      # http://wiki.zeromq.org/build:arm
      run: |
        LDFLAGS="-lgcc -lgcc_s" \
        CC=$TOOLCHAIN/bin/aarch64-unknown-linux-gnu-gcc \
        CXX=$TOOLCHAIN/bin/aarch64-unknown-linux-gnu-g++ \
        ./configure \
        --host=arm-none-linux-gnueabi \
        --enable-drafts \
        --enable-static \
        --disable-shared \
        --disable-libbsd \
        --prefix=$GITHUB_WORKSPACE/libzmq

    - name: Compile and install libzmq
      if: steps.cache-libzmq.outputs.cache-hit != 'true'
      working-directory: zeromq-4.3.5
      run: make -j$(nproc) && make install

    - name: Copy libzmq into library/src/nativeInterop/linuxArm64
      run: mkdir -p library/src/nativeInterop/linuxArm64 && cp -r libzmq/* library/src/nativeInterop/linuxArm64

    - name: Add arm64 architecture to dpkg
      run: sudo dpkg --add-architecture arm64

    - name: Add arm64 apt sources
      run: |
        cat > ~/arm64-sources.list <<EOF
        deb [arch=arm64] http://ports.ubuntu.com/ noble main restricted
        deb [arch=arm64] http://ports.ubuntu.com/ noble-updates main restricted
        deb [arch=arm64] http://ports.ubuntu.com/ noble universe
        deb [arch=arm64] http://ports.ubuntu.com/ noble-updates universe
        deb [arch=arm64] http://ports.ubuntu.com/ noble multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ noble-updates multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ noble-backports main restricted universe multiverse
        EOF
        sudo mv ~/arm64-sources.list /etc/apt/sources.list.d/arm64-sources.list

    - name: Restrict main apt sources to amd64
      run: |
        cat > ~/sources.list <<EOF
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble main restricted
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-updates main restricted
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble universe
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-updates universe
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble multiverse
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-updates multiverse
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-backports main restricted universe multiverse
        deb [arch=amd64] http://security.ubuntu.com/ubuntu/ noble-security main restricted
        deb [arch=amd64] http://security.ubuntu.com/ubuntu/ noble-security universe
        deb [arch=amd64] http://security.ubuntu.com/ubuntu/ noble-security multiverse
        EOF
        sudo mv ~/sources.list /etc/apt/sources.list

    - name: Install arm64 development libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y libmpv-dev:arm64 libayatana-appindicator3-dev:arm64

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v3

    - name: Build Linux Arm64 minimal binaries
      run: ./gradlew app:linuxArm64Binaries -PMINIMAL --stacktrace

    - name: Strip release binary
      run: $TOOLCHAIN/bin/aarch64-unknown-linux-gnu-strip app/build/bin/linuxArm64/releaseExecutable/*.kexe

    - name: Upload debug binary
      uses: actions/upload-artifact@v3
      with:
        name: spms-minimal-linux-arm64-debug
        path: app/build/bin/linuxArm64/debugExecutable/*.kexe

    - name: Upload release binary
      uses: actions/upload-artifact@v3
      with:
        name: spms-minimal-linux-arm64-release
        path: app/build/bin/linuxArm64/releaseExecutable/*.kexe

    - name: Build Linux Arm64 full binaries
      run: ./gradlew app:linuxArm64Binaries --stacktrace

    - name: Strip release binary
      run: $TOOLCHAIN/bin/aarch64-unknown-linux-gnu-strip app/build/bin/linuxArm64/releaseExecutable/*.kexe

    - name: Upload debug binary
      uses: actions/upload-artifact@v3
      with:
        name: spms-linux-arm64-debug
        path: app/build/bin/linuxArm64/debugExecutable/*.kexe

    - name: Upload release binary
      uses: actions/upload-artifact@v3
      with:
        name: spms-linux-arm64-release
        path: app/build/bin/linuxArm64/releaseExecutable/*.kexe

